/*
    consider an email as a node, two emails are connected iif they belong to the same person
    then find connected components of a graph
 */

struct cmp {
    bool operator() (const string& s, const string& t) {
        return s < t;
    }
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        if(accounts.size() == 0) {
            return vector<vector<string>>{};
        }
        unordered_map<string, string> email_to_name;
        unordered_map<string, vector<string>> adjList;
        for(vector<string>& s : accounts) {
            for(int i = 1; i < s.size(); i++) {
                email_to_name[s[i]] = s[0];
            }
            if(s.size() > 2) {
                for(int i = 1; i < s.size() - 1; i++) {
                    for(int j = i + 1; j < s.size(); j++) {
                        adjList[s[i]].push_back(s[j]);
                        adjList[s[j]].push_back(s[i]);
                    }
                }
            }
            else {
                adjList[s[1]] = {};
            }
        }
        vector<vector<string>> ans;
        unordered_set<string> visited;
        for(auto key : adjList) {
            string email = key.first;
            if(visited.find(email) == visited.end()) {
                vector<string> lst;
                dfs(adjList, lst, visited, email);
                sort(lst.begin(), lst.end(), cmp());
                ans.push_back(lst);
            }
        }
        vector<vector<string>> res;
        for(vector<string>& em : ans) {
            vector<string> tmp;
            tmp.push_back(email_to_name[em[0]]);
            for(string& s : em) {
                tmp.push_back(s);
            }
            res.push_back(tmp);
        }
        return res;
    }
private:
    void dfs(unordered_map<string, vector<string>>& adjList, vector<string>& lst, \
                unordered_set<string>& visited, string& email) {
        visited.insert(email);
        lst.push_back(email);
        for(string child : adjList[email]) {
            if(visited.find(child) == visited.end()) {
                dfs(adjList, lst, visited, child);
            }
        }
    }
};