class Solution {
public:
    int longestValidParentheses(string s) {
        /* dp[i]: len of longest valid paren ending at s[i] */
        if(s.size() == 0 || s.size() == 1) {
            return 0;
        }
        else if(s.size() == 2) {
            if(s == "()") {
                return 2;
            }
            else {
                return 0;
            }
        }
        vector<int> dp(s.size(), 0);
        if(s[0] == '(' && s[1] == ')') {
            dp[1] = 2;
        }
        for(int i = 2; i < s.size(); i++) {
            if(s[i] == ')') {
                if(s[i-1] == '(') {
                    dp[i] = dp[i-2] + 2;
                }
                else if(dp[i-1] > 0) {
                    if(i-1-dp[i-1] >= 0 && s[i-1-dp[i-1]] == '(') {
                        if(i-2-dp[i-1] >= 0) {
                            dp[i] = 2 + dp[i-1] + dp[i-2-dp[i-1]];
                        }
                        else {
                            dp[i] = 2 + dp[i-1];
                        }
                    }
                }
            }
        }
        int ans = 0;
        for(int v : dp) {
            ans = max(ans, v);
        }
        return ans;
    }
}; 