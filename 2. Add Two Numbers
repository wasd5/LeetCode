/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1) {
            return l2;
        }
        if(!l2) {
            return l1;
        }
        ListNode* p = l1;
        ListNode* q = l2;
        int carry = 0;
        int val = 0;
        ListNode* head = new ListNode(0);
        ListNode* cur = head;
        while(p && q) {
            val = (p->val + q->val + carry) % 10;
            carry = (p->val + q->val + carry) / 10;
            ListNode* here = new ListNode(val);
            cur->next = here;
            cur = here;
            p = p->next;
            q = q->next;
        }
        ListNde* h = head->next;
        delete head;
        if(!q) {
            while(p) {
                val = (p->val + carry) % 10;
                carry = (p->val + carry) / 10;
                ListNode* here = new ListNode(val);
                cur->next = here;
                cur = here;
                p = p->next;
            }
        }
        else if(!p) {
            while(q) {
                val = (q->val + carry) % 10;
                carry = (q->val + carry) / 10;
                ListNode* here = new ListNode(val);
                cur->next = here;
                cur = here;
                q = q->next;
            }
        }
        if(carry) {
            ListNode* here = new ListNode(carry);
            cur->next = here;
        }
        return h;
    }
};