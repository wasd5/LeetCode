class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        /* 0: unvisited, 1: red, 2: blue */
        vector<int> visited(graph.size(), 0);
        int count = 0;
        for(int i = 0; i < graph.size(); i++) {
            if(visited[i] == 0) {
                bool bipt = dfs(graph, i, visited, 1);
                if(!bipt) {
                    return false;
                }
            }
            
        }
        return true;
    }
private:
    bool dfs(const vector<vector<int>>& graph, int i, vector<int>& visited, int color) {
        visited[i] = color;
        bool canpartition = true;
        for(int child : graph[i]) {
            if(visited[child] == 0) {
                canpartition &= dfs(graph, child, visited, color == 1 ? 2 : 1);
            }
            else if(visited[child] == color) {
                canpartition = false;
            }
        }
        return canpartition;
    }
};