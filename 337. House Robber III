/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        /* dp[T] == n -> max value robbed from tree rooted at T is n */
        unordered_map<TreeNode*, int> dp;
        return dfs(root, dp);
    }
private:
    int dfs(TreeNode* root, unordered_map<TreeNode*, int>& dp) {
        if(!root) {
            return 0;
        }
        TreeNode* left = root->left;
        TreeNode* right = root->right;
        int l = 0, r = 0, ll = 0, lr = 0, rl = 0, rr = 0;
        if(left) {
            if(dp.find(left) == dp.end()) {
                dfs(left, dp);
            }
            l = dp[left];
            if(left->left) {
                if(dp.find(left->left) == dp.end()) {
                    dfs(left->left, dp);
                }
                ll = dp[left->left];
            }
            if(left->right) {
                if(dp.find(left->right) == dp.end()) {
                    dfs(left->right, dp);
                }
                lr = dp[left->right];
            }
        }
        if(right) {
            if(dp.find(right) == dp.end()) {
                dfs(right, dp);
            }
            r = dp[right];
            if(right->left) {
                if(dp.find(right->left) == dp.end()) {
                    dfs(right->left, dp);
                }
                rl = dp[right->left];
            }
            if(right->right) {
                if(dp.find(right->right) == dp.end()) {
                    dfs(right->right, dp);
                }
                rr = dp[right->right];
            }
        }
        dp[root] = max(root->val + ll + lr + rl + rr, l + r);
        return dp[root];
    }
};